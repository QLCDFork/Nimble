{
  "abstract" : [
    {
      "text" : "Throws the supplied error if the expectation has previously failed.",
      "type" : "text"
    }
  ],
  "deprecationSummary" : [
    {
      "inlineContent" : [
        {
          "text" : "Use the require dsl",
          "type" : "text"
        }
      ],
      "type" : "paragraph"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/Nimble\/documentation\/Nimble",
        "doc:\/\/Nimble\/documentation\/Nimble\/AsyncExpectation",
        "doc:\/\/Nimble\/documentation\/Nimble\/AsyncExpectation\/Expectation-Implementations"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/Nimble\/documentation\/Nimble\/AsyncExpectation\/onFailure(throw:)"
  },
  "kind" : "symbol",
  "metadata" : {
    "extendedModule" : "Nimble",
    "externalID" : "s:6Nimble11ExpectationPAAE9onFailure5throwys5Error_p_tKF::SYNTHESIZED::s:6Nimble16AsyncExpectationV",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "func"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "onFailure"
      },
      {
        "kind" : "text",
        "text" : "("
      },
      {
        "kind" : "externalParam",
        "text" : "throw"
      },
      {
        "kind" : "text",
        "text" : ": any "
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:s5ErrorP",
        "text" : "Error"
      },
      {
        "kind" : "text",
        "text" : ") "
      },
      {
        "kind" : "keyword",
        "text" : "throws"
      }
    ],
    "modules" : [
      {
        "name" : "Nimble"
      }
    ],
    "platforms" : [

    ],
    "role" : "symbol",
    "roleHeading" : "Instance Method",
    "symbolKind" : "method",
    "title" : "onFailure(throw:)"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "Linux"
          ],
          "tokens" : [
            {
              "kind" : "keyword",
              "text" : "func"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "onFailure"
            },
            {
              "kind" : "text",
              "text" : "("
            },
            {
              "kind" : "externalParam",
              "text" : "throw"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "internalParam",
              "text" : "error"
            },
            {
              "kind" : "text",
              "text" : ": any "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:s5ErrorP",
              "text" : "Error"
            },
            {
              "kind" : "text",
              "text" : ") "
            },
            {
              "kind" : "keyword",
              "text" : "throws"
            }
          ]
        }
      ],
      "kind" : "declarations"
    },
    {
      "content" : [
        {
          "anchor" : "discussion",
          "level" : 2,
          "text" : "Discussion",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "This provides a mechanism for halting tests when a failure occurs.  This can be used in",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "conjunction with ",
              "type" : "text"
            },
            {
              "code" : "Quick.StopTest",
              "type" : "codeVoice"
            },
            {
              "text" : " to halt a test when a failure would cause subsequent test",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "code to fail.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In the below example, the test will stop in the first line if ",
              "type" : "text"
            },
            {
              "code" : "array.count == 5",
              "type" : "codeVoice"
            },
            {
              "text" : " rather",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "than crash on the second line.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "try expect(array).to(haveCount(10)).onFailure(throw: StopTest.silently)",
            "expect(array[9]).to(...)"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "This method ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "MUST",
                      "type" : "text"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " be called after a matcher method like ",
                  "type" : "text"
                },
                {
                  "code" : "to",
                  "type" : "codeVoice"
                },
                {
                  "text" : " or ",
                  "type" : "text"
                },
                {
                  "code" : "not",
                  "type" : "codeVoice"
                },
                {
                  "text" : ".",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Otherwise, this expectation will be in an indeterminate state and will",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "unconditionally log an error.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Warning",
          "style" : "warning",
          "type" : "aside"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Similar functionality can be achieved using the ",
                  "type" : "text"
                },
                {
                  "code" : "status",
                  "type" : "codeVoice"
                },
                {
                  "text" : " property.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Remark",
          "style" : "note",
          "type" : "aside"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "This is deprecated in favor of the ",
                  "type" : "text"
                },
                {
                  "code" : "require",
                  "type" : "codeVoice"
                },
                {
                  "text" : " dsl (",
                  "type" : "text"
                },
                {
                  "code" : "require",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", ",
                  "type" : "text"
                },
                {
                  "code" : "unwrap",
                  "type" : "codeVoice"
                },
                {
                  "text" : ",",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "code" : "pollUnwrap",
                  "type" : "codeVoice"
                },
                {
                  "text" : "), which integrates the matcher seemlessly, or, in the case of",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "code" : "unwrap",
                  "type" : "codeVoice"
                },
                {
                  "text" : " and ",
                  "type" : "text"
                },
                {
                  "code" : "pollUnwrap",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", acts as a shorthand when you require that an",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "expression evaluate to some non-nil value. ",
                  "type" : "text"
                },
                {
                  "code" : "onFailure",
                  "type" : "codeVoice"
                },
                {
                  "text" : " will be removed in",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Nimble 15.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Attention",
          "style" : "note",
          "type" : "aside"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/nimble\/asyncexpectation\/onfailure(throw:)"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://Nimble/documentation/Nimble": {
  "abstract" : [
    {
      "inlineContent" : [
        {
          "text" : "Nimble",
          "type" : "text"
        }
      ],
      "type" : "strong"
    },
    {
      "text" : " is a testing framework for verifying the outcomes and Swift or Objective-C expressions.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "Nimble",
  "type" : "topic",
  "url" : "\/documentation\/nimble"
},
"doc://Nimble/documentation/Nimble/AsyncExpectation": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "AsyncExpectation"
    }
  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/AsyncExpectation",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "AsyncExpectation"
    }
  ],
  "role" : "symbol",
  "title" : "AsyncExpectation",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/asyncexpectation"
},
"doc://Nimble/documentation/Nimble/AsyncExpectation/Expectation-Implementations": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/AsyncExpectation\/Expectation-Implementations",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "Expectation Implementations",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/asyncexpectation\/expectation-implementations"
},
"doc://Nimble/documentation/Nimble/AsyncExpectation/onFailure(throw:)": {
  "abstract" : [
    {
      "text" : "Throws the supplied error if the expectation has previously failed.",
      "type" : "text"
    }
  ],
  "deprecated" : true,
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "onFailure"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "throw"
    },
    {
      "kind" : "text",
      "text" : ": any "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:s5ErrorP",
      "text" : "Error"
    },
    {
      "kind" : "text",
      "text" : ") "
    },
    {
      "kind" : "keyword",
      "text" : "throws"
    }
  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/AsyncExpectation\/onFailure(throw:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "onFailure(throw:)",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/asyncexpectation\/onfailure(throw:)"
}
}
}