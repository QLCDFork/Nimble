{
  "abstract" : [
    {
      "text" : "Expression represents the closure of the value inside expect(…).",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "Expressions are memoized by default. This makes them safe to call",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "evaluate() multiple times without causing a re-evaluation of the underlying",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "closure.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/Nimble\/documentation\/Nimble"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/Nimble\/documentation\/Nimble\/Expression"
  },
  "kind" : "symbol",
  "metadata" : {
    "externalID" : "s:6Nimble10ExpressionV",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "struct"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "Expression"
      }
    ],
    "modules" : [
      {
        "name" : "Nimble"
      }
    ],
    "navigatorTitle" : [
      {
        "kind" : "identifier",
        "text" : "Expression"
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Structure",
    "symbolKind" : "struct",
    "title" : "Expression"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "Linux"
          ],
          "tokens" : [
            {
              "kind" : "keyword",
              "text" : "struct"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "Expression"
            },
            {
              "kind" : "text",
              "text" : "<"
            },
            {
              "kind" : "genericParameter",
              "text" : "Value"
            },
            {
              "kind" : "text",
              "text" : ">"
            }
          ]
        }
      ],
      "kind" : "declarations"
    },
    {
      "content" : [
        {
          "anchor" : "overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Since the closure can be any code, Objective-C code may choose",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "to raise an exception. Currently, SyncExpression does not memoize",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "exception raising.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Warning",
          "style" : "warning",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "This provides a common consumable API for matchers to utilize to allow",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Nimble to change internals to how the captured closure is managed.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "topicSections" : [
    {
      "identifiers" : [
        "doc:\/\/Nimble\/documentation\/Nimble\/Expression\/init(expression:location:isClosure:)",
        "doc:\/\/Nimble\/documentation\/Nimble\/Expression\/init(memoizedExpression:location:withoutCaching:isClosure:)"
      ],
      "title" : "Initializers"
    },
    {
      "identifiers" : [
        "doc:\/\/Nimble\/documentation\/Nimble\/Expression\/isClosure",
        "doc:\/\/Nimble\/documentation\/Nimble\/Expression\/location"
      ],
      "title" : "Instance Properties"
    },
    {
      "identifiers" : [
        "doc:\/\/Nimble\/documentation\/Nimble\/Expression\/cast(_:)",
        "doc:\/\/Nimble\/documentation\/Nimble\/Expression\/evaluate()",
        "doc:\/\/Nimble\/documentation\/Nimble\/Expression\/toAsyncExpression()",
        "doc:\/\/Nimble\/documentation\/Nimble\/Expression\/withCaching()",
        "doc:\/\/Nimble\/documentation\/Nimble\/Expression\/withoutCaching()"
      ],
      "title" : "Instance Methods"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/nimble\/expression"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://Nimble/documentation/Nimble": {
  "abstract" : [
    {
      "inlineContent" : [
        {
          "text" : "Nimble",
          "type" : "text"
        }
      ],
      "type" : "strong"
    },
    {
      "text" : " is a testing framework for verifying the outcomes and Swift or Objective-C expressions.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "Nimble",
  "type" : "topic",
  "url" : "\/documentation\/nimble"
},
"doc://Nimble/documentation/Nimble/Expression": {
  "abstract" : [
    {
      "text" : "Expression represents the closure of the value inside expect(…).",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "Expressions are memoized by default. This makes them safe to call",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "evaluate() multiple times without causing a re-evaluation of the underlying",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "closure.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Expression"
    }
  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/Expression",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Expression"
    }
  ],
  "role" : "symbol",
  "title" : "Expression",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/expression"
},
"doc://Nimble/documentation/Nimble/Expression/cast(_:)": {
  "abstract" : [
    {
      "text" : "Returns a new Expression from the given expression. Identical to a map()",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "on this type. This should be used only to typecast the Expression’s",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "closure value.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "cast"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "genericParameter",
      "text" : "U"
    },
    {
      "kind" : "text",
      "text" : ">(("
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Value"
    },
    {
      "kind" : "text",
      "text" : "?) "
    },
    {
      "kind" : "keyword",
      "text" : "throws"
    },
    {
      "kind" : "text",
      "text" : " -> "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "U"
    },
    {
      "kind" : "text",
      "text" : "?) -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:6Nimble10ExpressionV",
      "text" : "Expression"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "typeIdentifier",
      "text" : "U"
    },
    {
      "kind" : "text",
      "text" : ">"
    }
  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/Expression\/cast(_:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "cast(_:)",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/expression\/cast(_:)"
},
"doc://Nimble/documentation/Nimble/Expression/evaluate()": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "evaluate"
    },
    {
      "kind" : "text",
      "text" : "() "
    },
    {
      "kind" : "keyword",
      "text" : "throws"
    },
    {
      "kind" : "text",
      "text" : " -> "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Value"
    },
    {
      "kind" : "text",
      "text" : "?"
    }
  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/Expression\/evaluate()",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "evaluate()",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/expression\/evaluate()"
},
"doc://Nimble/documentation/Nimble/Expression/init(expression:location:isClosure:)": {
  "abstract" : [
    {
      "text" : "Creates a new expression struct. Normally, expect(…) will manage this",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "creation process. The expression is memoized.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "identifier",
      "text" : "init"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "expression"
    },
    {
      "kind" : "text",
      "text" : ": () "
    },
    {
      "kind" : "keyword",
      "text" : "throws"
    },
    {
      "kind" : "text",
      "text" : " -> "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Value"
    },
    {
      "kind" : "text",
      "text" : "?, "
    },
    {
      "kind" : "externalParam",
      "text" : "location"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:6Nimble14SourceLocationC",
      "text" : "SourceLocation"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "isClosure"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sb",
      "text" : "Bool"
    },
    {
      "kind" : "text",
      "text" : ")"
    }
  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/Expression\/init(expression:location:isClosure:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "init(expression:location:isClosure:)",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/expression\/init(expression:location:isclosure:)"
},
"doc://Nimble/documentation/Nimble/Expression/init(memoizedExpression:location:withoutCaching:isClosure:)": {
  "abstract" : [
    {
      "text" : "Creates a new expression struct. Normally, expect(…) will manage this",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "creation process.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "identifier",
      "text" : "init"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "memoizedExpression"
    },
    {
      "kind" : "text",
      "text" : ": ("
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sb",
      "text" : "Bool"
    },
    {
      "kind" : "text",
      "text" : ") "
    },
    {
      "kind" : "keyword",
      "text" : "throws"
    },
    {
      "kind" : "text",
      "text" : " -> "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Value"
    },
    {
      "kind" : "text",
      "text" : "?, "
    },
    {
      "kind" : "externalParam",
      "text" : "location"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:6Nimble14SourceLocationC",
      "text" : "SourceLocation"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "withoutCaching"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sb",
      "text" : "Bool"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "isClosure"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sb",
      "text" : "Bool"
    },
    {
      "kind" : "text",
      "text" : ")"
    }
  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/Expression\/init(memoizedExpression:location:withoutCaching:isClosure:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "init(memoizedExpression:location:withoutCaching:isClosure:)",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/expression\/init(memoizedexpression:location:withoutcaching:isclosure:)"
},
"doc://Nimble/documentation/Nimble/Expression/isClosure": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "let"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "isClosure"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sb",
      "text" : "Bool"
    }
  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/Expression\/isClosure",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "isClosure",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/expression\/isclosure"
},
"doc://Nimble/documentation/Nimble/Expression/location": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "let"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "location"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:6Nimble14SourceLocationC",
      "text" : "SourceLocation"
    }
  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/Expression\/location",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "location",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/expression\/location"
},
"doc://Nimble/documentation/Nimble/Expression/toAsyncExpression()": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "toAsyncExpression"
    },
    {
      "kind" : "text",
      "text" : "() -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:6Nimble15AsyncExpressionV",
      "text" : "AsyncExpression"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Value"
    },
    {
      "kind" : "text",
      "text" : ">"
    }
  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/Expression\/toAsyncExpression()",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "toAsyncExpression()",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/expression\/toasyncexpression()"
},
"doc://Nimble/documentation/Nimble/Expression/withCaching()": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "withCaching"
    },
    {
      "kind" : "text",
      "text" : "() -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:6Nimble10ExpressionV",
      "text" : "Expression"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Value"
    },
    {
      "kind" : "text",
      "text" : ">"
    }
  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/Expression\/withCaching()",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "withCaching()",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/expression\/withcaching()"
},
"doc://Nimble/documentation/Nimble/Expression/withoutCaching()": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "withoutCaching"
    },
    {
      "kind" : "text",
      "text" : "() -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:6Nimble10ExpressionV",
      "text" : "Expression"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Value"
    },
    {
      "kind" : "text",
      "text" : ">"
    }
  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/Expression\/withoutCaching()",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "withoutCaching()",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/expression\/withoutcaching()"
}
}
}