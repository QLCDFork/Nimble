{
  "abstract" : [
    {
      "text" : "Run the provided block. If a POSIX SIGILL is received, handle it and return a BadInstructionException (which is just an empty object in this POSIX signal version). Otherwise return nil.",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "NOTE: This function is only intended for use in test harnesses – use in a distributed build is almost certainly a bad choice. If a SIGILL is received, the block will be interrupted using a C ",
      "type" : "text"
    },
    {
      "code" : "longjmp",
      "type" : "codeVoice"
    },
    {
      "text" : ". The risks associated with abrupt jumps apply here: most Swift functions are ",
      "type" : "text"
    },
    {
      "inlineContent" : [
        {
          "text" : "not",
          "type" : "text"
        }
      ],
      "type" : "emphasis"
    },
    {
      "text" : " interrupt-safe. Memory may be leaked and the program will not necessarily be left in a safe state.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/Nimble\/documentation\/Nimble"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/Nimble\/documentation\/Nimble\/catchBadInstruction(block:)"
  },
  "kind" : "symbol",
  "metadata" : {
    "externalID" : "s:6Nimble19catchBadInstruction5blockAA0cD9ExceptionCSgyyc_tF",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "func"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "catchBadInstruction"
      },
      {
        "kind" : "text",
        "text" : "("
      },
      {
        "kind" : "externalParam",
        "text" : "block"
      },
      {
        "kind" : "text",
        "text" : ": () -> "
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:s4Voida",
        "text" : "Void"
      },
      {
        "kind" : "text",
        "text" : ") -> "
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:6Nimble23BadInstructionExceptionC",
        "text" : "BadInstructionException"
      },
      {
        "kind" : "text",
        "text" : "?"
      }
    ],
    "modules" : [
      {
        "name" : "Nimble"
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Function",
    "symbolKind" : "func",
    "title" : "catchBadInstruction(block:)"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "Linux"
          ],
          "tokens" : [
            {
              "kind" : "keyword",
              "text" : "func"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "catchBadInstruction"
            },
            {
              "kind" : "text",
              "text" : "("
            },
            {
              "kind" : "externalParam",
              "text" : "block"
            },
            {
              "kind" : "text",
              "text" : ": "
            },
            {
              "kind" : "keyword",
              "text" : "@escaping"
            },
            {
              "kind" : "text",
              "text" : " () -> "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:s4Voida",
              "text" : "Void"
            },
            {
              "kind" : "text",
              "text" : ") -> "
            },
            {
              "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/BadInstructionException",
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:6Nimble23BadInstructionExceptionC",
              "text" : "BadInstructionException"
            },
            {
              "kind" : "text",
              "text" : "?"
            }
          ]
        }
      ],
      "kind" : "declarations"
    },
    {
      "kind" : "parameters",
      "parameters" : [
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "a function without parameters that will be run",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "block"
        }
      ]
    },
    {
      "content" : [
        {
          "anchor" : "return-value",
          "level" : 2,
          "text" : "Return Value",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "if an SIGILL is raised during the execution of ",
              "type" : "text"
            },
            {
              "code" : "block",
              "type" : "codeVoice"
            },
            {
              "text" : " then a BadInstructionException will be returned, otherwise ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/nimble\/catchbadinstruction(block:)"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://Nimble/documentation/Nimble": {
  "abstract" : [
    {
      "inlineContent" : [
        {
          "text" : "Nimble",
          "type" : "text"
        }
      ],
      "type" : "strong"
    },
    {
      "text" : " is a testing framework for verifying the outcomes and Swift or Objective-C expressions.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "Nimble",
  "type" : "topic",
  "url" : "\/documentation\/nimble"
},
"doc://Nimble/documentation/Nimble/BadInstructionException": {
  "abstract" : [
    {
      "text" : "Without Mach exceptions or the Objective-C runtime, there’s nothing to put in the exception object. It’s really just a boolean – either a SIGILL was caught or not.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "BadInstructionException"
    }
  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/BadInstructionException",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "BadInstructionException"
    }
  ],
  "role" : "symbol",
  "title" : "BadInstructionException",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/badinstructionexception"
},
"doc://Nimble/documentation/Nimble/catchBadInstruction(block:)": {
  "abstract" : [
    {
      "text" : "Run the provided block. If a POSIX SIGILL is received, handle it and return a BadInstructionException (which is just an empty object in this POSIX signal version). Otherwise return nil.",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "NOTE: This function is only intended for use in test harnesses – use in a distributed build is almost certainly a bad choice. If a SIGILL is received, the block will be interrupted using a C ",
      "type" : "text"
    },
    {
      "code" : "longjmp",
      "type" : "codeVoice"
    },
    {
      "text" : ". The risks associated with abrupt jumps apply here: most Swift functions are ",
      "type" : "text"
    },
    {
      "inlineContent" : [
        {
          "text" : "not",
          "type" : "text"
        }
      ],
      "type" : "emphasis"
    },
    {
      "text" : " interrupt-safe. Memory may be leaked and the program will not necessarily be left in a safe state.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "catchBadInstruction"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "block"
    },
    {
      "kind" : "text",
      "text" : ": () -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:s4Voida",
      "text" : "Void"
    },
    {
      "kind" : "text",
      "text" : ") -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:6Nimble23BadInstructionExceptionC",
      "text" : "BadInstructionException"
    },
    {
      "kind" : "text",
      "text" : "?"
    }
  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/catchBadInstruction(block:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "catchBadInstruction(block:)",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/catchbadinstruction(block:)"
}
}
}